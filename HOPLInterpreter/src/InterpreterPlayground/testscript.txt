import TestLib1Namespace as tlib;
import someNamespace;
import InterpreterPlayground.Playground as Playground;

namespace someNamespace
{
	int gv = 1;
	const float pi = 3.14;
	int gv2 = function3(1);
	string gv3 = Playground.IntToString(1);
	required string sayHello;
	int gv_sideeffect1 = Playground.Print(gv3);
	int gv_sideeffect2 = Playground.Print(sayHello);
	int gv_sideeffect3 = Playground.Print(Playground.gv_tuple[0]);

	// Single line comment
	int function1(){
		bool gv = true;
		int a = someNamespace.gv;
		string b = "hello " + "\"world\"";
		string bb = tlib.function1();
		bool c = function2();
		float d = a + 1.0;
		list<float> lf = [1.0, d];
		tuple<bool, int<>, float> tu = {true and false, function1, 2};
		Playground.Print("Going into await!");
		{a, string u} = await trigger1;
		Playground.Print("Received message: " + u);
		{c, _, _} = tu;
		int out_gv = Playground.gv_int;
		out_gv = Playground.PlaygroundFunction(3.12);
		int<string> delegate = Playground.ReturnsFunction();
		delegate("This was a delegate function");

		list<list<tuple<int, string>>> nested = [
			[ {0, "hello"}, {2, "world"} ], 
			[ {1, " "} ]
		];

		int ni = nested[0][1][0];
		nested[0][1][0] = 3;

		for(int i = 0; i < 3; i = i + 1)
		{
			int _x = i;
			string _s = Playground.IntToString(_x);
			Playground.Print(_s);
		}

		while(true)
		{
			Playground.Print("Unending loop!");
		}
		
		return a;
	}

	handle Playground.console_input(string input)
	{
		Playground.Print(input);
	}

	handle Playground.trigger_test2()
	{
		function1();
	}

	handle Playground.trigger_test1(int a, string b)
	{
		trigger1(a, b);
		Playground.Print("This should print!");
		return;
		Playground.Print("This should not print!");
	}

	int function3(int i){
		if(i > 1)
		{
			return 2;
		}
		else if(i > 0)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}

	int function4(){
		return 0;
	}

	trigger<int, string> trigger1;
}

namespace someOtherNamespace
{
	/* Multi line comment
	   Another line */
	/* Check */
}